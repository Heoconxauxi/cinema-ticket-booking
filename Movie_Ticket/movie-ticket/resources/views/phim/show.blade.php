{@extends('layouts.app')
@section('title', $phim['TenPhim'])

@section('content')
<div class="container-fluid bg-dark text-white p-0">

    {{-- üéûÔ∏è Banner phim --}}
    @if(!empty($phim['Banner']))
    <div class="banner position-relative">
        <img src="{{ $phim['Banner'] }}" class="w-100" style="height:400px;object-fit:cover;">
        <div class="position-absolute top-50 start-50 translate-middle text-center bg-dark bg-opacity-50 p-3 rounded">
            <h2 class="fw-bold">{{ $phim['TenPhim'] }}</h2>
        </div>
    </div>
    @endif

    <div class="container mt-5">
        <div class="row">
            {{-- Poster phim --}}
            <div class="col-md-4">
                {{-- Kho·∫£ng tr·ªëng tr√°nh navbar che n·ªôi dung --}}
                <div style="height:10px"></div>
                <img src="{{ $phim['Anh'] }}" class="img-fluid rounded shadow" alt="{{ $phim['TenPhim'] }}">
            </div>

            {{-- Th√¥ng tin phim --}}
            <div class="col-md-8 text-start">
                <h2 class="text-warning">{{ $phim['TenPhim'] }}</h2>
                <p><strong> ƒê·∫°o di·ªÖn:</strong> {{ $phim['DaoDien'] }}</p>
                <p><strong> Di·ªÖn vi√™n:</strong> {{ $phim['DienVien'] }}</p>
                <div class="d-flex flex-wrap gap-3">
                    <p><strong> Qu·ªëc gia:</strong> {{ $phim['QuocGia'] }}</p>
                    <?php
                    // Gi·∫£ s·ª≠ $phim['TenPhim'] = "Deadpool & Wolverine"
                    $tentimkiem = urlencode("trailer " . $phim['TenPhim']); // Deadpool+%26+Wolverine
                    ?>

                    <div class="d-inline-flex align-items-center ms-2">
                        <button class="btn btn-danger btn-sm" onclick="playTrailer('{{ $tentimkiem }}')">
                            üé¨ Play Trailer
                        </button>
                    </div>

                    <div id="videoPopup" class="popup" style="display:none;">
                        <div class="popup-content">
                            <span class="close-btn" onclick="closePopup()">&times;</span>
                            <iframe id="trailerFrame" width="100%" height="600" frameborder="0" allowfullscreen></iframe>
                        </div>
                    </div>

                    <style>
                        .popup {
                            position: fixed;
                            top: 0;
                            left: 0;
                            width: 100%;
                            height: 100%;
                            background: rgba(0, 0, 0, 0.9);
                            display: flex;
                            justify-content: center;
                            align-items: center;
                            z-index: 10000;
                        }

                        .popup-content {
                            position: relative;
                            width: 80%;
                            max-width: 1000px;
                            background: #000;
                            border-radius: 10px;
                            overflow: hidden;
                        }

                        .close-btn {
                            position: absolute;
                            top: 5px;
                            right: 15px;
                            font-size: 32px;
                            color: white;
                            cursor: pointer;
                        }
                    </style>

                    <script>
                        async function playTrailer(query) {
                            const apiKey = "AIzaSyCDOpMGc4dTgF9NYsXSm1w4GNT2XvJjJkc"; // üîë Thay b·∫±ng API Key c·ªßa b·∫°n
                            const url = `https://www.googleapis.com/youtube/v3/search?part=snippet&q=${query}&key=${apiKey}&type=video&maxResults=1`;

                            try {
                                const res = await fetch(url);
                                const data = await res.json();

                                if (data.items && data.items.length > 0) {
                                    const videoId = data.items[0].id.videoId;
                                    const iframe = document.getElementById('trailerFrame');
                                    iframe.src = `https://www.youtube.com/embed/${videoId}?autoplay=1&modestbranding=1`;
                                    document.getElementById('videoPopup').style.display = 'flex';
                                } else {
                                    alert("Kh√¥ng t√¨m th·∫•y trailer!");
                                }
                            } catch (error) {
                                alert("L·ªói khi t·∫£i trailer: " + error);
                            }
                        }

                        // Hide popup and stop the video
                        function closePopup() {
                            const iframe = document.getElementById('trailerFrame');
                            if (iframe) {
                                // stop and clear the iframe to stop audio/video playback
                                iframe.src = '';
                            }
                            const popup = document.getElementById('videoPopup');
                            if (popup) {
                                popup.style.display = 'none';
                            }
                        }

                        // Allow clicking outside the content to close the popup
                        document.addEventListener('DOMContentLoaded', function() {
                            const popup = document.getElementById('videoPopup');
                            if (popup) {
                                popup.addEventListener('click', function(e) {
                                    if (e.target === popup) {
                                        closePopup();
                                    }
                                });
                            }
                        });
                    </script>
                </div>
                <div class="d-flex flex-wrap gap-3">
                    <p class="mb-0"><strong>üìÖ NƒÉm:</strong> {{ $phim['NamPhatHanh'] }}</p>
                    <p class="mb-0"><strong>üïí Th·ªùi l∆∞·ª£ng:</strong> {{ $phim['ThoiLuong'] }} ph√∫t</p>
                </div>
                <div class="mt-3">
                    <strong>üé≠ Th·ªÉ lo·∫°i:</strong>
                    @foreach($phim['theloais'] as $tl)
                    <span class="badge bg-secondary">{{ $tl['TenTheLoai'] }}</span>
                    @endforeach
                </div>

                <hr>
                <h5 class="text-info"> N·ªôi dung</h5>
                <p>{{ $phim['MoTa'] }}</p>

                {{-- üéüÔ∏è L·ªãch chi·∫øu --}}
                <div class="mt-5">
                    <h4 class="text-primary mb-3">üóìÔ∏è L·ªãch chi·∫øu</h4>

                    {{-- N√∫t ch·ªçn ng√†y --}}
                    <div id="date-buttons" class="d-flex flex-wrap gap-2 justify-content-center mb-3"></div>

                    {{-- Khu v·ª±c hi·ªÉn th·ªã su·∫•t chi·∫øu theo ng√†y --}}
                    <div id="suat-container" class="text-center"></div>
                </div>

                <script>
                    document.addEventListener("DOMContentLoaded", () => {
                        const dateButtonsContainer = document.getElementById('date-buttons');
                        const suatContainer = document.getElementById('suat-container');
                        const allShowtimes = @json($suatChieuPhim);

                        // üî• TH√äM 2 D√íNG: L·∫•y gi·ªù hi·ªán t·∫°i v√† ƒë·ªãnh d·∫°ng ng√†y h√¥m nay
                        const now = new Date();
                        const todayStr = now.toISOString().split('T')[0]; // L·∫•y chu·ªói "YYYY-MM-DD" c·ªßa h√¥m nay

                        // üìÖ T·∫°o 5 n√∫t ng√†y k·∫ø ti·∫øp
                        const today = new Date();
                        for (let i = 0; i < 5; i++) {
                            const date = new Date(today);
                            date.setDate(today.getDate() + i);
                            const yyyy = date.getFullYear();
                            const mm = String(date.getMonth() + 1).padStart(2, '0');
                            const dd = String(date.getDate()).padStart(2, '0');
                            const formatted = `${yyyy}-${mm}-${dd}`;

                            const btn = document.createElement('button');
                            btn.className = 'btn btn-outline-warning';
                            btn.textContent = (i === 0 ? 'H√¥m nay' : date.toLocaleDateString('vi-VN', {
                                weekday: 'long',
                                day: '2-digit',
                                month: '2-digit'
                            }));
                            btn.dataset.date = formatted;
                            btn.onclick = () => renderShowtimes(formatted, btn);
                            dateButtonsContainer.appendChild(btn);
                        }

                        // üî• H√ÄM RENDER ƒê√É S·ª¨A LOGIC L·ªåC
                        function renderShowtimes(date, btn) {
                            document.querySelectorAll('#date-buttons button').forEach(b => b.classList.remove('active', 'btn-warning', 'text-dark'));
                            btn.classList.add('active', 'btn-warning', 'text-dark');

                            // Ki·ªÉm tra xem ng√†y ƒë∆∞·ª£c ch·ªçn c√≥ ph·∫£i l√† h√¥m nay kh√¥ng
                            const isToday = (date === todayStr);

                            const filtered = allShowtimes.filter(sc => {
                                // 1. L·ªçc theo ng√†y (gi·ªëng nh∆∞ c≈©)
                                const isOnSelectedDate = sc.GioChieu.startsWith(date);
                                if (!isOnSelectedDate) {
                                    return false;
                                }

                                // 2. N·∫øu l√† "H√¥m nay", th√¨ l·ªçc th√™m theo gi·ªù
                                if (isToday) {
                                    const showTime = new Date(sc.GioChieu);
                                    // Ch·ªâ tr·∫£ v·ªÅ true (hi·ªÉn th·ªã) n·∫øu gi·ªù chi·∫øu >= gi·ªù hi·ªán t·∫°i
                                    return showTime >= now;
                                }

                                // 3. N·∫øu l√† ng√†y kh√°c (kh√¥ng ph·∫£i h√¥m nay), ch·ªâ c·∫ßn l·ªçc theo ng√†y
                                return true;
                            });

                            if (filtered.length === 0) {
                                suatContainer.innerHTML = `<p class='text-light mt-3'>Kh√¥ng c√≥ su·∫•t chi·∫øu trong ng√†y n√†y.</p>`;
                                return;
                            }

                            let html = `<div class="d-flex flex-wrap justify-content-center gap-2">`;
                            filtered.forEach(sc => {
                               // üî• S·ª¨A L·ªñI M√öI GI·ªú (TIMEZONE)
¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† // 1. L·∫•y chu·ªói t·ª´ API (vd: "2025-10-25T21:00:00.000000Z")
¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† // 2. C·∫Øt b·ªè ph·∫ßn ".000000Z" v√† thay 'T' b·∫±ng ' '
¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† const localTimeStr = sc.GioChieu.substring(0, 19).replace('T', ' '); // -> "2025-10-25 21:00:00"

¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† // 3. new Date() b√¢y gi·ªù s·∫Ω hi·ªÉu ƒë√¢y l√† GI·ªú ƒê·ªäA PH∆Ø∆†NG, kh√¥ng ph·∫£i UTC
¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† const time = new Date(localTimeStr).toLocaleTimeString('vi-VN', {
¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† hour: '2-digit',
¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† minute: '2-digit'
¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† });
                                // Link (button) c·ªßa b·∫°n
                                html += `
                    <button 
                        class="btn btn-outline-light m-1"
                        onclick="chonSuatChieu(${sc.MaPhim}, ${sc.MaSuatChieu}, ${sc.MaPhong})">
                        ${time} (${sc.phong?.TenPhong || 'R·∫°p ch∆∞a r√µ'})
                    </button>
                `;
                            });
                            html += `</div>`;
                            suatContainer.innerHTML = html;
                        }

                        // Hi·ªÉn th·ªã m·∫∑c ƒë·ªãnh h√¥m nay
                        const firstBtn = dateButtonsContainer.querySelector('button');
                        if (firstBtn) firstBtn.click();
                    });
                </script>

                <script>
                    function chonSuatChieu(maPhim, maSuat, maPhong) {
                        const isLoggedIn = @json(session('NDloggedIn') ?? false);

                        if (!isLoggedIn) {
                            if (confirm("‚ö†Ô∏è B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ ƒë·∫∑t v√©.\nNh·∫•n OK ƒë·ªÉ ƒë·∫øn trang ƒëƒÉng nh·∫≠p.")) {
                                window.location.href = "/login";
                            }
                            return;
                        }

                        window.location.href = `/phim/${maPhim}/dat-ve/${maSuat}/${maPhong}`;
                    }
                </script>




            </div>


        </div>


    </div>
</div>
@endsection